function functions = getFunctions(varargin)

Binary = {

'Assortativity - UND','assortativity_bin2',1, ...
'Assortativity: <br>The assortativity coefficient is a correlation coefficient between the degrees of all nodes on two opposite ends of a link. <br>A positive assortativity coefficient indicates that nodes tend to link to other nodes with the same or similar degree.';

'Assortativity out-degree/in-degree correlation - DIR ','assortativity_OutIn',1, ...
'Assortativity: <br>The assortativity coefficient is a correlation coefficient between the degrees of all nodes on two opposite ends of a link. <br>A positive assortativity coefficient indicates that nodes tend to link to other nodes with the same or similar degree.';

'Assortativity in-degree/out-degree correlation - DIR ','assortativity_InOut',1, ...
'Assortativity: <br>The assortativity coefficient is a correlation coefficient between the degrees of all nodes on two opposite ends of a link. <br>A positive assortativity coefficient indicates that nodes tend to link to other nodes with the same or similar degree.';

'Assortativity out-degree/out-degree correlation - DIR ','assortativity_OutOut',1, ...
'Assortativity: <br>The assortativity coefficient is a correlation coefficient between the degrees of all nodes on two opposite ends of a link. <br>A positive assortativity coefficient indicates that nodes tend to link to other nodes with the same or similar degree.';

'Assortativity in-degree/in-degree correlation - DIR ','assortativity_InIn',1, ...
'Assortativity: <br>The assortativity coefficient is a correlation coefficient between the degrees of all nodes on two opposite ends of a link. <br>A positive assortativity coefficient indicates that nodes tend to link to other nodes with the same or similar degree.';

'Betweenness centrality - UND/DIR','betweenness_bin',2, ...
'Betweenness centrality: <br>Node betweenness centrality is the fraction of all shortest paths in the network that contain a given node. <br>Nodes with high values of betweenness centrality participate in a large number of shortest paths.';

'Clustering coefficient global - UND','clusterMean_bu',1, ...
'Clustering coefficient: <br>The clustering coefficient is the fraction of triangles around a node and is equivalent to the fraction of node’s neighbors that are neighbors of each other. <br>Mean value above all brain regions';

'Clustering coefficient global - DIR','clusterMean_bd',1, ...
'Clustering coefficient: <br>The clustering coefficient is the fraction of triangles around a node and is equivalent to the fraction of node’s neighbors that are neighbors of each other. <br>Mean value above all brain regions';

'Clustering coefficient local - UND','clustering_coef_bu',2, ...
'Clustering coefficient: <br>The clustering coefficient is the fraction of triangles around a node <br>and is equivalent to the fraction of node’s neighbors that are neighbors of each other.';

'Clustering coefficient local - DIR','clustering_coef_bd',2, ...
'Clustering coefficient: <br>The clustering coefficient is the fraction of triangles around a node <br>and is equivalent to the fraction of node’s neighbors that are neighbors of each other.';

'Characteristic path global - UND/DIR','charpath_B',1, ...
'Characteristic path length:<br>The characteristic path length is the average shortest path length in the network.';

'Characteristic Path local - UND/DIR','nodalpath_bin',2, ...            
'Characteristic path length:<br>The local characteristic path length is the average shortest path length of one node to all other (reachable) nodes in the network.';

'Community structure Newman - affiliation Vector - UND','modularity_und',2, ...
'Modularity - Affiliation Vector: <br>The optimal community structure is a subdivision of the network into nonoverlapping groups of nodes in a way that maximizes the number of within-group edges,<br> and minimizes the number of between-group edges. <br>The modularity is a statistic that quantifies the degree to which the network may be subdivided into such clearly delineated groups.';

'Community structure Louvain - affiliation Vector - UND ','modularity_louvain_und',2, ...
'Modularity - Affiliation Vector: <br>The optimal community structure is a subdivision of the network into nonoverlapping groups of nodes in a way that maximizes the number of within-group edges, <br>and minimizes the number of between-group edges. <br>The modularity is a statistic that quantifies the degree to which the network may be subdivided into such clearly delineated groups.';

'Community structure Newman - modularity Output - UND','modularity_QOut_und',1, ...
'Maximized modularity Q: <br>The optimal community structure is a subdivision of the network into nonoverlapping groups of nodes in a way that maximizes the number of within-group edges,<br> and minimizes the number of between-group edges. <br>The modularity is a statistic that quantifies the degree to which the network may be subdivided into such clearly delineated groups.';

'Community structure Louvain - modularity Output - UND','modularity_louvain_QOut_und',1, ...
'Maximized modularity Q: <br>The optimal community structure is a subdivision of the network into nonoverlapping groups of nodes in a way that maximizes the number of within-group edges, <br>and minimizes the number of between-group edges. <br>The modularity is a statistic that quantifies the degree to which the network may be subdivided into such clearly delineated groups.';

'Cost efficiency global (Relative or SICE thresholding) - UND','cost_efficiency_relative_bin',1, ...
'Cost efficiency: <br>The global cost efficiency is defined as the global efficiency at a given cost minus the cost, i.e., (E ? C).'

'Cost efficiency global (Absolute or Significance thresholding) - UND','cost_efficiency_absolute_bin',1, ...
'Cost efficiency: <br>The global cost efficiency is defined as the global efficiency at a given cost minus the cost, i.e., (E ? C).'

'Degree - UND','degrees_und',2, ...
'Degree: <br>Node degree is the number of links connected to the node. <br>In directed networks, the in-degree is the number of inward links and the out-degree is the number of outward links. <br>Connection weights are ignored in calculations';

'Degree - DIR','degrees_dir',2, ...
'Degree: <br>Node degree is the number of links connected to the node. <br>In directed networks, the in-degree is the number of inward links and the out-degree is the number of outward links. <br>Connection weights are ignored in calculations';

'Density - UND','density_und',1,...
'Density:<br> is the fraction of present connections to possible connections. <br>Connection weights are ignored in calculations.';

'Density - DIR','density_dir',1,...
'Density:<br> is the fraction of present connections to possible connections. <br>Connection weights are ignored in calculations.';

'Diffusion efficiency - UND/DIR','diffusion_efficiency_adapted_E',3,...
'Diffusion efficiency: <br> is the expected number of steps it takes a random walker <br>starting at node i to arrive for the first time at node j.';

'Diffusion efficiency - UND/DIR','diffusion_efficiency_adapted_GE',1,...
'Diffusion efficiency: <br> is the expected number of steps it takes a random walker <br>starting at node i to arrive for the first time at node j.';

'Distance Matrix - UND/DIR','distance_bin',3, ...            
'Distance Matrix:<br> The distance matrix contains lengths of shortest paths between all pairs of nodes.';

'Eccentricity - UND/DIR','charpath_B_ecc',2, ...
'Eccentricity:<br>The eccentricity of a vertex v is the greatest geodesic distance between v and any other vertex.<br>It can be thought of as how far a node is from the node most distant from it in the graph.';

'Edge betweenness centrality - UND/DIR','edge_betweenness_bin',3, ...
'Edge betweenness centrality: <br>Edge betweenness centrality is the fraction of all shortest paths in the network that contain a given edge. <br>Edges with high values of betweenness centrality participate in a large number of shortest paths.';

'Efficiency global - UND','efficiency_bin',1, ...
'Global efficiency: <br>The global efficiency is the average inverse shortest path length in the network, <br>and is inversely related to the characteristic path length.';

'Efficiency local - UND','efficiency_local_bin', 2, ...;
'Local efficiency: <br>The local efficiency is the global efficiency computed on node neighborhoods, <br>and is related to the clustering coefficient.';

'Efficiency route global - UND/DIR','route_efficiency2',1, ...
'Mean global routing efficiency: <br>The routing efficiency is the average of inverse shortest path length.';

'Efficiency route pairwise - UND/DIR','route_efficiency_Erout',3, ...
'Pair-wise routing efficiency: <br>The routing efficiency is the average of inverse shortest path length.';

'Efficiency route local - UND/DIR','route_efficiency_Eloc',2, ...
'Local efficiency: <br>The routing efficiency is the average of inverse shortest path length.';

'Eigenvector centrality - UND','eigenvector_centrality_und',2, ...
'Eigenvector centrality: <br>Eigenector centrality is a self-referential measure of centrality -- <br>nodes have high eigenvector centrality if they connect to other nodes that have high eigenvector centrality.';

'Flow coefficient global - DIR','flow_coef_bd_FC',1, ...
'Flow coefficient: The flow coefficient is similar to betweenness centrality, but computes centrality based on on local neighborhoods. The flow coefficient is inversely related to the clustering coefficient.';

'Flow coefficient local - DIR','flow_coef_bd',2, ...
'Flow coefficient: The flow coefficient is similar to betweenness centrality, but computes centrality based on on local neighborhoods. The flow coefficient is inversely related to the clustering coefficient.';

'Flow coefficient total paths - DIR','flow_coef_bd_total',2, ...
'Flow coefficient: The flow coefficient is similar to betweenness centrality, but computes centrality based on on local neighborhoods. The flow coefficient is inversely related to the clustering coefficient.';

'Graph radius - UND/DIR','charpath_B_radius',1, ...
'Graph radius:<br>The radius = min(eccentricity).';

'Graph diameter - UND/DIR','charpath_B_diameter',1, ...
'Graph diameter:<br>The diameter = max(eccentricity).';

'K-coreness centrality - UND','kcoreness_centrality_bu',2, ...
'K-coreness centrality:<br> The k-core is the largest subgraph comprising nodes of degree at least k. <br>The coreness of a node is k if the node belongs to the k-core but not to the (k+1)-core.';

'K-coreness centrality - DIR','kcoreness_centrality_bd',2, ...
'K-coreness centrality:<br> The k-core is the largest subgraph comprising nodes of degree at least k. <br>The coreness of a node is k if the node belongs to the k-core but not to the (k+1)-core.';

'Matching index - UND','matching_ind_Mall',3, ...
'Matching index: <br>The matching index computes for any two nodes u and v, <br>the amount of overlap in the connection patterns of u and v. <br>Self-connections and u-v connections are ignored. <br>The matching index is a symmetric quantity, similar to a correlation or a dot product.';

'Matching index out - DIR','matching_ind_Mout',3, ...
'Matching index: <br>The matching index computes for any two nodes u and v, <br>the amount of overlap in the connection patterns of u and v. <br>Self-connections and u-v connections are ignored. <br>The matching index is a symmetric quantity, similar to a correlation or a dot product.';

'Matching index in - DIR','matching_ind_Min',3, ...
'Matching index: <br>The matching index computes for any two nodes u and v, <br>the amount of overlap in the connection patterns of u and v. <br>Self-connections and u-v connections are ignored. <br>The matching index is a symmetric quantity, similar to a correlation or a dot product.';

'Mean first passage time - UND/DIR','mean_first_passage_time2',3, ...
'Mean first passage time: <br>The first passage time is the expected number of steps it takes a random <br>walker to reach one node from another.';

'Neighborhood overlap - UND','edge_nei_overlap_bu',3, ...
'Neighborhood overlap: <br>These functions compute the overlap between the neighborhoods of pairs of nodes linked by edges.';

'Neighborhood overlap - DIR','edge_nei_overlap_bd',3, ...
'Neighborhood overlap: <br>These functions compute the overlap between the neighborhoods of pairs of nodes linked by edges.';

'Path transitivity - UND/DIR','path_transitivity2',3, ...
'Path transitivity: <br>Path transitivity is the density of local detours (triangles) that are available along the shortest-paths between all pairs of nodes.';

'Rich club coefficient - UND','rich_club_bu2',2, ...
'Rich club coefficient: <br>The rich club coefficient at level k is the fraction of edges that connect nodes of degree k or higher out of the maximum number of edges that such nodes might share. <br> OUTPUT RESULTS VIEWER: <br>y-axis: Thresholds <br> x-axis: level k <br> <br> OUTPUT EXPORT: please ignore the "node names/brain areas" the colums represent level k';

'Rich club coefficient - DIR','rich_club_bd2',2, ...
'Rich club coefficient: <br>The rich club coefficient at level k is the fraction of edges that connect nodes of degree k or higher out of the maximum number of edges that such nodes might share. <br> OUTPUT RESULTS VIEWER: <br>y-axis: Thresholds <br> x-axis: level k <br> <br> OUTPUT EXPORT: please ignore the "node names/brain areas" the colums represent level k';

'Search Information - UND/DIR','search_information_adapted',3, ...
'Search Information: <br>Search information is the amount of information (in bits) that a random walker needs to follow the shortest path between a given pair of nodes.';

'Small World Propensity - UND','small_world_propensity_bin',2, ...
'Small World Propensity'

'Subgraph centrality - UND','subgraph_centrality',2, ...
'Subgraph centrality: <br>The subgraph centrality of a node is a weighted sum of closed walks of different lengths in the network starting and ending at the node.';

'Topological overlap - UND','gtom2',3, ...
'Topological overlap: <br>The m-th step generalized topological overlap measure quantifies the extent to which a pair of nodes have similar m-th step neighbors <br>(nodes that are reachable by a path of at most length m).<br>step size = 5<br> -> These values can be changed in the helper function!';

'Transitivity - UND','transitivity_bu',1, ...
'Transitivity: <br>The transitivity is the ratio of triangles to triplets in the network <br>and is an alternative to the clustering coefficient.';

'Transitivity - DIR','transitivity_bd',1, ...
'Transitivity: <br>The transitivity is the ratio of triangles to triplets in the network <br>and is an alternative to the clustering coefficient.';

'Within-module degree z-score - UND','module_degree_zscore2',2, ...
'Within-module degree z-score: <br>The within-module degree z-score is a within-module version of degree centrality. <br>This measure requires a previously determined community structure (see above).';

'Within-module out-neighbor degree z-score - DIR','module_degree_zscore3',2, ...
'Within-module degree z-score: <br>The within-module degree z-score is a within-module version of degree centrality. <br>This measure requires a previously determined community structure (see above).';

'Participation coefficient - UND','participation_coefficient2',2,...
'Participation coefficient: <br>Participation coefficient is a measure of diversity of intermodular connections of individual nodes.<br> This measure requires a previously determined community structure (see above).';

'Participation out-neighbor coefficient - DIR','participation_coefficient3',2,...
'Participation coefficient: <br>Participation coefficient is a measure of diversity of intermodular connections of individual nodes.<br> This measure requires a previously determined community structure (see above).';

'Get Components - UND','get_components',1,...
'Get Components: <br> Returns the components of an undirected graph specified by the binary and <br>  undirected adjacency matrix adj. Components and their constitutent nodes are <br> assigned the same index and stored in the vector, comps. The vector, comp_sizes,<br> contains the number of nodes beloning to each component.';

};


Weighted = {

'Assortativity - UND','assortativity_wei2',1, ...
'Assortativity: <br>The assortativity coefficient is a correlation coefficient between the degrees of all nodes on two opposite ends of a link. <br>A positive assortativity coefficient indicates that nodes tend to link to other nodes with the same or similar degree.';

'Assortativity out-degree/in-degree correlation - DIR','assortativity_weiOutIn',1, ...
'Assortativity: <br>The assortativity coefficient is a correlation coefficient between the degrees of all nodes on two opposite ends of a link. <br>A positive assortativity coefficient indicates that nodes tend to link to other nodes with the same or similar degree.';

'Assortativity in-degree/out-degree correlation - DIR','assortativity_weiInOut',1, ...
'Assortativity: <br>The assortativity coefficient is a correlation coefficient between the degrees of all nodes on two opposite ends of a link. <br>A positive assortativity coefficient indicates that nodes tend to link to other nodes with the same or similar degree.';

'Assortativity out-degree/out-degree correlation - DIR','assortativity_weiOutOut',1, ...
'Assortativity: <br>The assortativity coefficient is a correlation coefficient between the degrees of all nodes on two opposite ends of a link. <br>A positive assortativity coefficient indicates that nodes tend to link to other nodes with the same or similar degree.';

'Assortativity in-degree/in-degree correlation - DIR','assortativity_weiInIn',1, ...
'Assortativity: <br>The assortativity coefficient is a correlation coefficient between the degrees of all nodes on two opposite ends of a link. <br>A positive assortativity coefficient indicates that nodes tend to link to other nodes with the same or similar degree.';

'Betweenness centrality','betweenness_wei_length',2, ...
'Betweenness centrality: <br>Node betweenness centrality is the fraction of all shortest paths in the network that contain a given node. <br>Nodes with high values of betweenness centrality participate in a large number of shortest paths.';

'Cluster coefficient global - UND','clusterMean_wu',1, ...
'Clustering coefficient: <br>The clustering coefficient is the fraction of triangles around a node and is equivalent to the fraction of node’s neighbors that are neighbors of each other.  <br>Mean value above all brain regions.';

'Cluster coefficient global - DIR','clusterMean_wd',1, ...
'Clustering coefficient: <br>The clustering coefficient is the fraction of triangles around a node and is equivalent to the fraction of node’s neighbors that are neighbors of each other.  <br>Mean value above all brain regions.';

'Cluster coefficient global (normalized input weight) - UND','clusterMean_wu_normalized',1, ...
'Clustering coefficient: <br>The clustering coefficient is the fraction of triangles around a node and is equivalent to the fraction of node’s neighbors that are neighbors of each other.  <br>Mean value above all brain regions.';

'Cluster coefficient global (normalized input weight) - DIR','clusterMean_wd_normalized',1, ...
'Clustering coefficient: <br>The clustering coefficient is the fraction of triangles around a node and is equivalent to the fraction of node’s neighbors that are neighbors of each other.  <br>Mean value above all brain regions.';

'Clustering coefficient local - UND','clustering_coef_wu',2, ...
'Clustering coefficient: <br>The clustering coefficient is the fraction of triangles around a node and is equivalent to the fraction of node’s neighbors that are neighbors of each other.';

'Clustering coefficient local - DIR','clustering_coef_wd',2, ...
'Clustering coefficient: <br>The clustering coefficient is the fraction of triangles around a node and is equivalent to the fraction of node’s neighbors that are neighbors of each other.';

'Clustering coefficient local (normalized input weight) - UND','clustering_coef_wu_normalized',2, ...
'Clustering coefficient: <br>The clustering coefficient is the fraction of triangles around a node and is equivalent to the fraction of node’s neighbors that are neighbors of each other.';

'Clustering coefficient local (normalized input weight) - DIR','clustering_coef_wd_normalized',2, ...
'Clustering coefficient: <br>The clustering coefficient is the fraction of triangles around a node and is equivalent to the fraction of node’s neighbors that are neighbors of each other.';

'Characteristic path global - UND/DIR','charpath_W',1, ...
'Characteristic path length:<br>The characteristic path length is the average shortest path length in the network.';

'Characteristic Path local - UND/DIR','nodalpath_wei',2, ...            
'Characteristic path length:<br>The local characteristic path length is the average shortest path length of one node to all other (reachable) nodes in the network.';

'Community structure Newman - affiliation Vector - UND','modularity_und',2, ...
'Modularity - Affiliation Vector: <br>The optimal community structure is a subdivision of the network into nonoverlapping groups of nodes in a way that maximizes the number of within-group edges,<br> and minimizes the number of between-group edges. <br>The modularity is a statistic that quantifies the degree to which the network may be subdivided into such clearly delineated groups.';

'Community structure Louvain - affiliation Vector - UND','modularity_louvain_und',2, ...
'Modularity - Affiliation Vector: <br>The optimal community structure is a subdivision of the network into nonoverlapping groups of nodes in a way that maximizes the number of within-group edges, <br>and minimizes the number of between-group edges. <br>The modularity is a statistic that quantifies the degree to which the network may be subdivided into such clearly delineated groups.';

'Community structure Newman - modularity Output - UND','modularity_QOut_und',1, ...
'Maximized modularity Q: <br>The optimal community structure is a subdivision of the network into nonoverlapping groups of nodes in a way that maximizes the number of within-group edges,<br> and minimizes the number of between-group edges. <br>The modularity is a statistic that quantifies the degree to which the network may be subdivided into such clearly delineated groups.';

'Community structure Louvain - modularity Output - UND','modularity_louvain_QOut_und',1, ...
'Maximized modularity Q: <br>The optimal community structure is a subdivision of the network into nonoverlapping groups of nodes in a way that maximizes the number of within-group edges, <br>and minimizes the number of between-group edges. <br>The modularity is a statistic that quantifies the degree to which the network may be subdivided into such clearly delineated groups.';

'MULTISLICE affiliation Vector GENERALIZED Louvain - MULTISLICE affiliation Vector','genlouvain_multislice',1, ...
'MULTISLICE affiliation Vector: <br>MULTISLICE affiliation Vector'

'Cost efficiency global (Relative or SICE thresholding) - UND','cost_efficiency_relative_wei',1, ...
'Cost efficiency: <br>The global cost efficiency is defined as the global efficiency at a given cost minus the cost, i.e., (E ? C).'

'Cost efficiency global (Absolute or Significance thresholding) - UND','cost_efficiency_absolute_wei',1, ...
'Cost efficiency: <br>The global cost efficiency is defined as the global efficiency at a given cost minus the cost, i.e., (E ? C).'

'Degree - UND','degrees_und',2, ...
'Degree: <br>Node degree is the number of links connected to the node. <br>In directed networks, the in-degree is the number of inward links and the out-degree is the number of outward links. <br>Connection weights are ignored in calculations';

'Degree - DIR','degrees_dir',2, ...
'Degree: <br>Node degree is the number of links connected to the node. <br>In directed networks, the in-degree is the number of inward links and the out-degree is the number of outward links. <br>Connection weights are ignored in calculations';

'Density - UND','density_und',1,...
'Density:<br> is the fraction of present connections to possible connections. <br>Connection weights are ignored in calculations.';

'Density - DIR','density_dir',1,...
'Density:<br> is the fraction of present connections to possible connections. <br>Connection weights are ignored in calculations.';

'Diffusion efficiency - UND/DIR','diffusion_efficiency_adapted_E',3,...
'Diffusion efficiency: <br> is the expected number of steps it takes a random walker <br>starting at node i to arrive for the first time at node j.';

'Diffusion efficiency - UND/DIR','diffusion_efficiency_adapted_GE',1,...
'Diffusion efficiency: <br> is the expected number of steps it takes a random walker <br>starting at node i to arrive for the first time at node j.';

'Distance - UND/DIR','distance_wei_length',3, ...
'Distance Matrix: <br>The distance matrix contains lengths of shortest paths between all pairs of nodes.';

'Eccentricity - UND/DIR','charpath_W_ecc',2, ...
'Eccentricity:<br>The eccentricity of a vertex v is the greatest geodesic distance between v and any other vertex.<br>It can be thought of as how far a node is from the node most distant from it in the graph.';

'Edge betweenness centrality - UND/DIR','edge_betweenness_wei_length',3, ...
'Edge betweenness centrality: <br>Edge betweenness centrality is the fraction of all shortest paths in the network that contain a given edge. <br>Edges with high values of betweenness centrality participate in a large number of shortest paths.';

'Efficiency global - UND','efficiency_wei',1, ...
'Global efficiency: <br>The global efficiency is the average inverse shortest path length in the network, <br>and is inversely related to the characteristic path length.';

'Efficiency local - UND','efficiency_local_wei',2, ...
'Local efficiency: <br>The local efficiency is the global efficiency (see below) computed on node neighborhoods, <br>and is related to the clustering coefficient.';

'Efficiency route global - UND/DIR','route_efficiency2',1, ...
'Mean global routing efficiency: <br>The routing efficiency is the average of inverse shortest path length.';

'Efficiency route pairwise - UND/DIR','route_efficiency_Erout',3, ...
'Pair-wise routing efficiency: <br>The routing efficiency is the average of inverse shortest path length.';

'Efficiency route local - UND/DIR','route_efficiency_Eloc',2, ...
'Local efficiency: <br>The routing efficiency is the average of inverse shortest path length.';

'Eigenvector centrality - UND','eigenvector_centrality_und',2, ...
'Eigenvector centrality: <br>Eigenector centrality is a self-referential measure of centrality -- <br>nodes have high eigenvector centrality if they connect to other nodes that have high eigenvector centrality.';

'Graph radius - UND/DIR','charpath_W_radius',1, ...
'Graph radius:<br>The radius = min(eccentricity).';

'Graph diameter - UND/DIR','charpath_W_diameter',1, ...
'Graph diameter:<br>The diameter = max(eccentricity).';

'Mean first passage time - UND/DIR','mean_first_passage_time2',3, ...
'Mean first passage time: <br>The first passage time is the expected number of steps it takes a random <br>walker to reach one node from another.';

'Path transitivity - UND/DIR','path_transitivity2',3, ...
'Path transitivity: <br>Path transitivity is the density of local detours (triangles) that are available along the shortest-paths between all pairs of nodes.';

'Rich club coefficient - UND','rich_club_wu2',2, ...
'Rich club coefficient: <br>The rich club coefficient at level k is the fraction of edges that connect nodes of degree k or higher out of the maximum number of edges that such nodes might share. <br> OUTPUT RESULTS VIEWER: <br>y-axis: Thresholds <br> x-axis: level k <br> <br> OUTPUT EXPORT: please ignore the "node names/brain areas" the colums represent level k';

'Rich club coefficient - DIR','rich_club_wd2',2, ...
'Rich club coefficient: <br>The rich club coefficient at level k is the fraction of edges that connect nodes of degree k or higher out of the maximum number of edges that such nodes might share. <br> OUTPUT RESULTS VIEWER: <br>y-axis: Thresholds <br> x-axis: level k <br> <br> OUTPUT EXPORT: please ignore the "node names/brain areas" the colums represent level k';

'Small World Propensity - UND','small_world_propensity',2, ...
'Small World Propensity'

'Strength - UND','strengths_und',2, ...
'Strength: <br>Node strength is the sum of weights of links connected to the node.';

'Strength - DIR','strengths_dir',2, ...
'Strength: <br>Node strength is the sum of weights of links connected to the node.';

'Shannon-entropy based diversity coefficient (POSITIVE connections)- UND','diversity_coef_sign_POS',2, ...
'Shannon-entropy based diversity coefficient:<br>The Shannon-entropy based diversity coefficient (based on positive connections) measures the diversity<br>of intermodular connections of individual nodes and ranges from 0 to 1.';

'Shannon-entropy based diversity coefficient (NEGATIVE connections)- UND','diversity_coef_sign_NEG',2, ...
'Shannon-entropy based diversity coefficient:<br>The Shannon-entropy based diversity coefficient (based on positive connections) measures the diversity<br>of intermodular connections of individual nodes and ranges from 0 to 1.';

'Transitivity - UND','transitivity_wu',1, ...
'Transitivity: <br>The transitivity is the ratio of triangles to triplets in the network and is an alternative to the clustering coefficient.';

'Transitivity - DIR','transitivity_wd',1, ...
'Transitivity: <br>The transitivity is the ratio of triangles to triplets in the network and is an alternative to the clustering coefficient.';

'Within-module degree z-score - UND','module_degree_zscore2',2, ...
'Within-module degree z-score: <br>The within-module degree z-score is a within-module version of degree centrality. <br>This measure requires a previously determined community structure (see above).';

'Within-module out-neighbor degree z-score - DIR','module_degree_zscore3',2, ...
'Within-module degree z-score: <br>The within-module degree z-score is a within-module version of degree centrality. <br>This measure requires a previously determined community structure (see above).';

'Participation coefficient - UND','participation_coefficient2',2,...
'Participation coefficient: <br>Participation coefficient is a measure of diversity of intermodular connections of individual nodes.<br> This measure requires a previously determined community structure (see above).';

'Participation out-neighbor coefficient - DIR','participation_coefficient3',2,...
'Participation coefficient: <br>Participation coefficient is a measure of diversity of intermodular connections of individual nodes.<br> This measure requires a previously determined community structure (see above).';

'Louvain modularity algorithm (neg weights) - affiliation Vector - UND', 'modularity_louvain_und_sign',2, ...
'Modularity - Affiliation Vector:<br>The functions are supplementary information to the paper <br>Weight-conserving characterization of complex functional brain networks <br>Rubinov M, Sporns O (2011) NeuroImage, 56:2068-2079.';

'Louvain modularity algorithm (neg weights)- modularity Output - UND', 'modularity_louvain_QOut_und_sign',1, ...
'Maximized modularity Q:<br>The functions are supplementary information to the paper <br>Weight-conserving characterization of complex functional brain networks <br>Rubinov M, Sporns O (2011) NeuroImage, 56:2068-2079.';

'Fine-tuning modularity algorithm (neg weights) - affiliation Vector - UND', 'modularity_finetune_und_sign',2, ...
'Modularity - Affiliation Vector:<br>The functions are supplementary information to the paper <br>Weight-conserving characterization of complex functional brain networks <br>Rubinov M, Sporns O (2011) NeuroImage, 56:2068-2079.';

'Fine-tuning modularity algorithm (neg weights)- modularity Output - UND', 'modularity_finetune_QOut_und_sign',1, ...
'Maximized modularity Q:<br>The functions are supplementary information to the paper <br>Weight-conserving characterization of complex functional brain networks <br>Rubinov M, Sporns O (2011) NeuroImage, 56:2068-2079.';

};



noThresh = {
    
'Correlation between Areas','corr_area',1, '',...
'Brain-Network Variability','bn_var',1, ''...

};


if(nargin >= 1 && varargin{1} == 1)
    functions{1} = [Binary; {'Smallworldness bu','smallworldness_bu',1, ''}];
    functions{2} = [Weighted;{'Smallworldness wu','smallworldness_wu',1, ''}];
    functions{3} = noThresh;
else
    functions{1} = [Binary];
    functions{2} = [Weighted];
    functions{3} = noThresh;    
end
